{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DevCon2020 Notes This is a collection of my notes from attending a developer conference in 2020. These are raw notes and I may or may not be cleaning them up in the future. It is meant as a jumping point to give people things to go off and research on their own and for me to remember what I learned.","title":"Home"},{"location":"#devcon2020-notes","text":"This is a collection of my notes from attending a developer conference in 2020. These are raw notes and I may or may not be cleaning them up in the future. It is meant as a jumping point to give people things to go off and research on their own and for me to remember what I learned.","title":"DevCon2020 Notes"},{"location":"about/","text":"About Author James Hare Email: harejamesm@gmail.com LinkedIn: https://www.linkedin.com/in/jameshareuk GitHub Portfolio: https://github.com/JamesHare","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#author","text":"James Hare Email: harejamesm@gmail.com LinkedIn: https://www.linkedin.com/in/jameshareuk GitHub Portfolio: https://github.com/JamesHare","title":"Author"},{"location":"talks/artifactory/","text":"Artifactory What is Artifactory? Artifactory is a binary repository manager responsible for managing finary artifacts. Internal dependencies External dependencies Storing built artifacts including container images Global distribution of artifacts Package Types Can handle many package types including: chef docker rubygems ivy maven rpm/yum Things to know Artifactory implements a checksum-based storage No duplication in physical storage Repository types Local Remote Virtual - A combination of local and remote Replication types push events like create, copy, move and delete. pull used for remote repositories to pre-populate the cache","title":"Artifactory"},{"location":"talks/artifactory/#artifactory","text":"What is Artifactory? Artifactory is a binary repository manager responsible for managing finary artifacts. Internal dependencies External dependencies Storing built artifacts including container images Global distribution of artifacts Package Types Can handle many package types including: chef docker rubygems ivy maven rpm/yum Things to know Artifactory implements a checksum-based storage No duplication in physical storage Repository types Local Remote Virtual - A combination of local and remote Replication types push events like create, copy, move and delete. pull used for remote repositories to pre-populate the cache","title":"Artifactory"},{"location":"talks/beyond-usability/","text":"Beyond Usability Useability is a powerful tool. It insuures that we build do what it is meant to do. Usability has limitations. Research and Design phases: * Exploration * Creation * Validation * Refinements * Wash, rinse, and repeat Usability can help or harm. It's possible to create a highly usable product without it being useful. We have to understand complex systems and understand the workflows of our clients. Context is key. People don't always use tools in ways that we think they do. New Design Perspectives: How do we find the good stuff? Start with a problem. When usability empowers a user, it also disempowers that same user. \"Don't make me think\" by Steve Krug. Don't make your users have to learn new skills to operate your software. Look at the Crash of Air France in 2009. The autopilot was left on and within 5 mins crashed into the Atlantic. After post-crash analysis, it was found to be a problem of \"de-skilling\" due to more reliance on software over time. When they have to take manual intervation, they didn't know what to do due to lack of practise. Read \"Ironies of Automation\" paper. 3 pages long. Designers typically look at what users do with the product (flying by autopilot). They don't think about what users still have left to do. Design the non-use scenarios. Design for skill preservation. * Intermittent automation (don't use autopilot or dev tools too much) * Person-in-the-loop (human is handling the high level choices) * Awkward mish-mash (maintaining a mix of both automation and using skills at random) * Simulation (build a simulator for the humans to play along) ###Usability does not guarantee usefulness Examlpe: Sign language translation gloves. It sounds great but deaf people say they could just use a keyboard like everyone else. Designer ---> empathy ---> users Participatory Design When developing a city, people got angry about certain buildings going up. The city scrapped the idea and coordinated a collection of the community to design it as they would like it. It worked! It's hard for designers to learn \"enough\" about the users. It's easier for users to learn \"enough\" about design. Improving usability can amplify political conflicts \"If you are neutral in situations of injustice, you have choen the side of the oppressor\" Desmond Tutu. Nextdoor is an app for connecting with your neighbors. For years, it has been acused of providing users a way to racially profile their neighbors. Adversarial Design Make people more productive with roadblocks. Use annoying design tricks to try to pull people out of their bad workflows. When we make something so easy that anyone can use it, human beings become interchangable. Maslach Burnout Inventory: Depersonalization Emotional exhaustion Sense of powerlessness \" The software changes how people work together. They'd become more disconnected; less likely to see and help one another and often less able to.\" - Doctor from Brigham and Women's Hospital. Permaculture A design paradigm modelled after natural ecosystems where everything is viewed as webs of relationships. Ideas from Permaculture: Use edges and value the marginal. Produce no waste. Design from patterns to details. Apply self-regulations and accept feedback. Obtain a yield Observe and interact Creatively use and respond to change. Usability is one tool, not the only tool.","title":"Beyond Usability"},{"location":"talks/beyond-usability/#beyond-usability","text":"Useability is a powerful tool. It insuures that we build do what it is meant to do. Usability has limitations. Research and Design phases: * Exploration * Creation * Validation * Refinements * Wash, rinse, and repeat Usability can help or harm. It's possible to create a highly usable product without it being useful. We have to understand complex systems and understand the workflows of our clients. Context is key. People don't always use tools in ways that we think they do. New Design Perspectives: How do we find the good stuff? Start with a problem. When usability empowers a user, it also disempowers that same user. \"Don't make me think\" by Steve Krug. Don't make your users have to learn new skills to operate your software. Look at the Crash of Air France in 2009. The autopilot was left on and within 5 mins crashed into the Atlantic. After post-crash analysis, it was found to be a problem of \"de-skilling\" due to more reliance on software over time. When they have to take manual intervation, they didn't know what to do due to lack of practise. Read \"Ironies of Automation\" paper. 3 pages long. Designers typically look at what users do with the product (flying by autopilot). They don't think about what users still have left to do. Design the non-use scenarios. Design for skill preservation. * Intermittent automation (don't use autopilot or dev tools too much) * Person-in-the-loop (human is handling the high level choices) * Awkward mish-mash (maintaining a mix of both automation and using skills at random) * Simulation (build a simulator for the humans to play along) ###Usability does not guarantee usefulness Examlpe: Sign language translation gloves. It sounds great but deaf people say they could just use a keyboard like everyone else. Designer ---> empathy ---> users","title":"Beyond Usability"},{"location":"talks/beyond-usability/#participatory-design","text":"When developing a city, people got angry about certain buildings going up. The city scrapped the idea and coordinated a collection of the community to design it as they would like it. It worked! It's hard for designers to learn \"enough\" about the users. It's easier for users to learn \"enough\" about design.","title":"Participatory Design"},{"location":"talks/beyond-usability/#improving-usability-can-amplify-political-conflicts","text":"\"If you are neutral in situations of injustice, you have choen the side of the oppressor\" Desmond Tutu. Nextdoor is an app for connecting with your neighbors. For years, it has been acused of providing users a way to racially profile their neighbors.","title":"Improving usability can amplify political conflicts"},{"location":"talks/beyond-usability/#adversarial-design","text":"Make people more productive with roadblocks. Use annoying design tricks to try to pull people out of their bad workflows.","title":"Adversarial Design"},{"location":"talks/beyond-usability/#when-we-make-something-so-easy-that-anyone-can-use-it-human-beings-become-interchangable","text":"Maslach Burnout Inventory: Depersonalization Emotional exhaustion Sense of powerlessness \" The software changes how people work together. They'd become more disconnected; less likely to see and help one another and often less able to.\" - Doctor from Brigham and Women's Hospital.","title":"When we make something so easy that anyone can use it, human beings become interchangable."},{"location":"talks/beyond-usability/#permaculture","text":"A design paradigm modelled after natural ecosystems where everything is viewed as webs of relationships. Ideas from Permaculture: Use edges and value the marginal. Produce no waste. Design from patterns to details. Apply self-regulations and accept feedback. Obtain a yield Observe and interact Creatively use and respond to change. Usability is one tool, not the only tool.","title":"Permaculture"},{"location":"talks/cucumber/","text":"Working with Cucumber What is cucumber? It is a bahavoir-driven development tool using Gherkin syntax. You can use it to record and test requirements. It is designed to be non-technical, human readable, and in the plain language of business. Cucumber requirements are broken into Features, which are comprised of one of more Scenarios. Feature: describes what's going on, at a very high level. Scenario: describes a more targeted, concrete business rule. Given: provide context, set up prereqs. WhenL an action or event Then: the expected results Each scenario tells a succinct, complete behavior. Scenario Outline: Allows you to test multiple similar ehabiors using variables. Examples: a table of conditions The Scenario Outline has turned one test into three. Cucumber tags help group Scenarios and Feature files for reporting. Downsides: Some requirements can't be tested with cucumber. No built in wyay to cross-reference or embed other requirements. Test data creation and cleanup loads to collisions and failed test runs. Tests run each time the code is built in Jenkins: More requirements means more tests and longer build time.","title":"Cucumber"},{"location":"talks/cucumber/#working-with-cucumber","text":"What is cucumber? It is a bahavoir-driven development tool using Gherkin syntax. You can use it to record and test requirements. It is designed to be non-technical, human readable, and in the plain language of business. Cucumber requirements are broken into Features, which are comprised of one of more Scenarios. Feature: describes what's going on, at a very high level. Scenario: describes a more targeted, concrete business rule. Given: provide context, set up prereqs. WhenL an action or event Then: the expected results Each scenario tells a succinct, complete behavior. Scenario Outline: Allows you to test multiple similar ehabiors using variables. Examples: a table of conditions The Scenario Outline has turned one test into three. Cucumber tags help group Scenarios and Feature files for reporting. Downsides: Some requirements can't be tested with cucumber. No built in wyay to cross-reference or embed other requirements. Test data creation and cleanup loads to collisions and failed test runs. Tests run each time the code is built in Jenkins: More requirements means more tests and longer build time.","title":"Working with Cucumber"},{"location":"talks/distributed-caching/","text":"Distributed Caching A cache stores data for quick access at a later time. Caching is a technique to imporove performance and scalability It will decrease response times and reduce load on downstream services and data sources. The more static the data is, the longer it can be kept in a cache. You should use it for frequently requested data. Types of caches: Private In memory cache per JVM Shared Shared caches across multiple service instances (Hazelcast) Internal Cache is stored close to the consumer. In the same container. External On an external service. Inline Sits between the data source and the consumer. Consumer --- cache --- data source Commonly used in web browsers Side Sits separetly from the data source. cache --- consumer --- data source What makes a cache distributed? Dynamic membership State coordination Members have a limited view Common distributed caches: Infinispan Redis Terracotta EhCache Amazon Elasicache Memcache Hazelcast Hazelcast: In membory data grid (IMDG): Two topologies Embeddeds Client/server Hazelcast Partitions: Single node cluster Dual node cluster As you add more nodes to the cluster, you get more partitions and the shards will be shared accross them. Hazelcast discovery mechanisms: TCP AWS Cloud Zookeeper Eureka Kubenetes Heroku How is your cache kept up to date? Polling Periodically checking source for updates Pushing Source sends a message when there is an update Read-through updates Get a request to read the cache and you find that the cache is out of date","title":"Distributed Caching"},{"location":"talks/distributed-caching/#distributed-caching","text":"A cache stores data for quick access at a later time. Caching is a technique to imporove performance and scalability It will decrease response times and reduce load on downstream services and data sources. The more static the data is, the longer it can be kept in a cache. You should use it for frequently requested data. Types of caches: Private In memory cache per JVM Shared Shared caches across multiple service instances (Hazelcast) Internal Cache is stored close to the consumer. In the same container. External On an external service. Inline Sits between the data source and the consumer. Consumer --- cache --- data source Commonly used in web browsers Side Sits separetly from the data source. cache --- consumer --- data source What makes a cache distributed? Dynamic membership State coordination Members have a limited view Common distributed caches: Infinispan Redis Terracotta EhCache Amazon Elasicache Memcache Hazelcast Hazelcast: In membory data grid (IMDG): Two topologies Embeddeds Client/server Hazelcast Partitions: Single node cluster Dual node cluster As you add more nodes to the cluster, you get more partitions and the shards will be shared accross them. Hazelcast discovery mechanisms: TCP AWS Cloud Zookeeper Eureka Kubenetes Heroku How is your cache kept up to date? Polling Periodically checking source for updates Pushing Source sends a message when there is an update Read-through updates Get a request to read the cache and you find that the cache is out of date","title":"Distributed Caching"},{"location":"talks/frankenstein/","text":"Frankenstein: Building a Monster Don't work seperately from a Solution Designer. Don't be like Doctor Frankenstein, who is unwilling to face his monster. \"Is git like a Cerner thing?\" - How do you handle a question from people who don't know the topic? Educate. Extend a helping hand. Don't be afraid to walk each other through problems, technical or not. We can learn from each other. Try to break the system. What can we throw at the system now so that we can correct it now? Doctor Frankenstein worked on his own. He developed at night in the dark and built a monster that no one wanted. DON'T WORK ALONE! Embrace Healthy Conflict - It's not you vs. me. It's you & me vs. the problem. \"When two partners always agree, one of them is not necessary.\" - Bits and Pieces, The Economic Press. It's ok to play devils advocate as long as you do it respectfully. Frankenstein was first hackathon. Mary Shelly was in Switzerland staying with group of writers challenged to write a story scarier than the others could write. My take is that you shouldn't force ideas to be born. Just let them be born. Part take in Hackathons, DevCon talks, Tech talks, etc. as it gets your name around. Development Ivory Tower. DON'T WORK ALONE! Doctor Frankenstein would have created something a lot better if he had involved the townsfolk more. The townsfolk wanted a steam engine, doctor frankenstein built a monster. He didn't document it, built it, and the townsfolk were left to deal with something they never wanted. Here's how to listen to your clients: Ux Meetings - Include external and internal stakeholders in UX meetings. One-time Kickoff. Have a 1 time kickoff \"collaboration meeting\" with clients to tell them what you are going to do. Optimization labs. Several clients get to see the fleshed out idea more. Shadow and Survey. Shadow and survey 2-3 heavily invested clients on a workflow that you are trying to solve. Design Sprint. Consider a design sprint to work through the actual design of an app. 4 days. Involve the UX and IP teams. Behavioral Researchers. Take client pain points and group them into common themes. Crazy 8's. Take 8 mins to come up with 8 ideas on a folded peice of paper. What can you do to break down barriers? Is your ego in check or are you difficult to work with? Have you looked for opportunites (hackathons, deisgn sprints, etc.) to prove out your ideas? Are you involving your clients early enough and prior to dev? Are you too afraid of getting negative feedback? The way forward is iterative feedback.","title":"Lessons Learned from Frankenstein"},{"location":"talks/frankenstein/#frankenstein-building-a-monster","text":"Don't work seperately from a Solution Designer. Don't be like Doctor Frankenstein, who is unwilling to face his monster. \"Is git like a Cerner thing?\" - How do you handle a question from people who don't know the topic? Educate. Extend a helping hand. Don't be afraid to walk each other through problems, technical or not. We can learn from each other. Try to break the system. What can we throw at the system now so that we can correct it now? Doctor Frankenstein worked on his own. He developed at night in the dark and built a monster that no one wanted. DON'T WORK ALONE! Embrace Healthy Conflict - It's not you vs. me. It's you & me vs. the problem. \"When two partners always agree, one of them is not necessary.\" - Bits and Pieces, The Economic Press. It's ok to play devils advocate as long as you do it respectfully. Frankenstein was first hackathon. Mary Shelly was in Switzerland staying with group of writers challenged to write a story scarier than the others could write. My take is that you shouldn't force ideas to be born. Just let them be born. Part take in Hackathons, DevCon talks, Tech talks, etc. as it gets your name around. Development Ivory Tower. DON'T WORK ALONE! Doctor Frankenstein would have created something a lot better if he had involved the townsfolk more. The townsfolk wanted a steam engine, doctor frankenstein built a monster. He didn't document it, built it, and the townsfolk were left to deal with something they never wanted. Here's how to listen to your clients: Ux Meetings - Include external and internal stakeholders in UX meetings. One-time Kickoff. Have a 1 time kickoff \"collaboration meeting\" with clients to tell them what you are going to do. Optimization labs. Several clients get to see the fleshed out idea more. Shadow and Survey. Shadow and survey 2-3 heavily invested clients on a workflow that you are trying to solve. Design Sprint. Consider a design sprint to work through the actual design of an app. 4 days. Involve the UX and IP teams. Behavioral Researchers. Take client pain points and group them into common themes. Crazy 8's. Take 8 mins to come up with 8 ideas on a folded peice of paper. What can you do to break down barriers? Is your ego in check or are you difficult to work with? Have you looked for opportunites (hackathons, deisgn sprints, etc.) to prove out your ideas? Are you involving your clients early enough and prior to dev? Are you too afraid of getting negative feedback? The way forward is iterative feedback.","title":"Frankenstein: Building a Monster"},{"location":"talks/iot-car-device/","text":"IoT Car Device Base Design Three core components: API UI Data Collector (IoT Device) API core functionality: Receive and store data with a generated timestamp Retrieve data by device ID Hosted on Heroku. Language: Java Framework: Spring Boot UI: Framework: React Map Library: OpenLayers Hosting: Heroku IoT Device: Microcontroller / Single Board Computer: Raspberry Pi Sim module: SIM7000 Carrier: Hologram.io Gathering Data Post data per location point Post data per location point vs post data every 2-3 hours Challenges: Power consumption Not enough power to the SIM7000 makes it unresponsive. PC/Laptop USB power doesn't work. Initial response delay Lengthy boot routing for a SIM7000. 15 mins to 3 hours. Slow initial connection to network Futher reading: https://dev.io/alwaysup/make-an-iot-device-for-tracking-vehiciles-1706","title":"IoT Car Device"},{"location":"talks/iot-car-device/#iot-car-device","text":"","title":"IoT Car Device"},{"location":"talks/iot-car-device/#base-design","text":"Three core components: API UI Data Collector (IoT Device) API core functionality: Receive and store data with a generated timestamp Retrieve data by device ID Hosted on Heroku. Language: Java Framework: Spring Boot UI: Framework: React Map Library: OpenLayers Hosting: Heroku IoT Device: Microcontroller / Single Board Computer: Raspberry Pi Sim module: SIM7000 Carrier: Hologram.io Gathering Data Post data per location point Post data per location point vs post data every 2-3 hours Challenges: Power consumption Not enough power to the SIM7000 makes it unresponsive. PC/Laptop USB power doesn't work. Initial response delay Lengthy boot routing for a SIM7000. 15 mins to 3 hours. Slow initial connection to network Futher reading: https://dev.io/alwaysup/make-an-iot-device-for-tracking-vehiciles-1706","title":"Base Design"},{"location":"talks/is-your-team-happy/","text":"Is Your Team Happy? Happiness is the experience of positive emotions. Emotions of Happiness: Pride Gratitude Awe Hope Inspiration Joy Interest Amusement Love What is it important to discuss happiness? A recent survey was conducted that shows happiness is at an all time low in Americans for the past 50 years. We are continually chasing happiness. However, happiness leads to succes, not the other way around. Mayo Clinic Staff say that the brain simply works better when it is in a positive state. Negativity releases cortisol (which leads to fight or flight mode) Positivity releases copamine and serotonin (improve visual cortex and more neural connections). \"The Happiness Advantage\" book. How do we monitor happiness? Bio-feedback devices? Affect detection? Collection data from wearables? Look for relevant metrics we think correlate? Overtime? The best way is to just ask the team how they are feeling through an anonymous survey. Happiness surveys 10 questions tops (5 if it's monthly) Consistent questions and the same metrics you are measuring it on Test out the survey on a coworker before sending it out Use non-biased language (\"please complete the survey before end of the week\" over \"let me know how we are doing because I may lose my job\") Collect the data over time to see how your team are happy over time. Different times of the year. People leaving the team. Layoffs. Do NOT try to find out who left negative feedback as you will break trust and buy-in to the survey. How to be happy: Prime your brain for happiness. Perception defines reality. The simplest way to get a happiness boost is to smile . List 3 positives per day. So much of our jobs as Software Engineers are focused around the negatives. Solving problems. Solving bugs. Being neck deep in the negatives. Look back over the previous day and sort through the positives. List 3. Just write it down with pen and paper to make sure you have a very low activation effort. Lean on your social network for support. Show appreciation and gratitude. Say thank you! Take small boosts of happiness throughout the day Cat videos Memes Listening to music Anticipating small bosts of happiness increases cortisone throughout the day Add funny pictures to slides during a talk Meditation A way to reset the brain Exercise your mind and body Priming your team for happiness: Schedule regular time with the team for bonding without doing work Team outings Virtual lunches/ coffee time/ happy hour Make sprint retrospectives and SWOTs habitual Celebrate and aknowledge what went well Call out things that didn't Embrace recognition opportunities Company awards Just sending an email saying good job helps Works and language matter Your team follows the tone that you set for them. Don't say \"this meeting is going to suck\" before going into a meeting. You will prime them for failure. Instead recognize it as a challenge. Don't call anything a post-mortem. Instant negativity. Calls to action: Value your happiness Defined your happiness Dont' put it to the side If you are positive and happy, you WILL be successful Be happy and spread the ripple effet of happiness Create a culture that PRIORITIZES happiness!","title":"IS Your Team Happy?"},{"location":"talks/is-your-team-happy/#is-your-team-happy","text":"Happiness is the experience of positive emotions. Emotions of Happiness: Pride Gratitude Awe Hope Inspiration Joy Interest Amusement Love What is it important to discuss happiness? A recent survey was conducted that shows happiness is at an all time low in Americans for the past 50 years. We are continually chasing happiness. However, happiness leads to succes, not the other way around. Mayo Clinic Staff say that the brain simply works better when it is in a positive state. Negativity releases cortisol (which leads to fight or flight mode) Positivity releases copamine and serotonin (improve visual cortex and more neural connections). \"The Happiness Advantage\" book. How do we monitor happiness? Bio-feedback devices? Affect detection? Collection data from wearables? Look for relevant metrics we think correlate? Overtime? The best way is to just ask the team how they are feeling through an anonymous survey. Happiness surveys 10 questions tops (5 if it's monthly) Consistent questions and the same metrics you are measuring it on Test out the survey on a coworker before sending it out Use non-biased language (\"please complete the survey before end of the week\" over \"let me know how we are doing because I may lose my job\") Collect the data over time to see how your team are happy over time. Different times of the year. People leaving the team. Layoffs. Do NOT try to find out who left negative feedback as you will break trust and buy-in to the survey. How to be happy: Prime your brain for happiness. Perception defines reality. The simplest way to get a happiness boost is to smile . List 3 positives per day. So much of our jobs as Software Engineers are focused around the negatives. Solving problems. Solving bugs. Being neck deep in the negatives. Look back over the previous day and sort through the positives. List 3. Just write it down with pen and paper to make sure you have a very low activation effort. Lean on your social network for support. Show appreciation and gratitude. Say thank you! Take small boosts of happiness throughout the day Cat videos Memes Listening to music Anticipating small bosts of happiness increases cortisone throughout the day Add funny pictures to slides during a talk Meditation A way to reset the brain Exercise your mind and body Priming your team for happiness: Schedule regular time with the team for bonding without doing work Team outings Virtual lunches/ coffee time/ happy hour Make sprint retrospectives and SWOTs habitual Celebrate and aknowledge what went well Call out things that didn't Embrace recognition opportunities Company awards Just sending an email saying good job helps Works and language matter Your team follows the tone that you set for them. Don't say \"this meeting is going to suck\" before going into a meeting. You will prime them for failure. Instead recognize it as a challenge. Don't call anything a post-mortem. Instant negativity. Calls to action: Value your happiness Defined your happiness Dont' put it to the side If you are positive and happy, you WILL be successful Be happy and spread the ripple effet of happiness Create a culture that PRIORITIZES happiness!","title":"Is Your Team Happy?"},{"location":"talks/kubenetes/","text":"The move from DC/OS to Kubenetes Configuration as Code - Youre config should run alongside your code. It should be in source control. Hiarchical configuration Have reasonable defaults in the top level and get more detailed as you get further to application config. Affinity is a tool to manage state inside of containers.","title":"Kubenetes"},{"location":"talks/kubenetes/#the-move-from-dcos-to-kubenetes","text":"Configuration as Code - Youre config should run alongside your code. It should be in source control. Hiarchical configuration Have reasonable defaults in the top level and get more detailed as you get further to application config. Affinity is a tool to manage state inside of containers.","title":"The move from DC/OS to Kubenetes"},{"location":"talks/learning-and-homelab/","text":"Learning and Building a Homelab Build side projects to keep learning. \"When I hear I forget. When I see I remember. When I do I learn.\" Things that started as side projects: gmail facebook github craigslist twitter khan academy Side projects: give you a space to learn and a place to fail teach you how to perservere Gives you big picture thinking When thinking about a side project: Start small Keep an \"idea book\" Perfect is the enemy of done Open Source: An opportunity to learn Build confidence Take criticism of your code How to find a project to contribute to? github.com/trending github.com/explore podcasts conference talks on YouTube Local conferences and meetups You can even start by just writing documentation for an existing project that isn't well documented. It's a good way to get to understand a certain project. Teach. Volunteer. Mentor. These help you to build empathy. Toastmasters programs. Create: digital art, cook, plant a garden, woodworking, music. What is a homelab? Any sort of project that you built by youself. A home network of computers. A small raspberrypi microcontroller set up. Everything is moving to an \"as-a-service\" set up. Music. Food. Movies. Cloud. etc. Operating a homelab can provide meaningful services that you can use. By building a homelab, you have so much opportunity to learn about things that you didn't know you didn't know. Other resources: r/homelab r/selfhosted r/homeserver digital ocean guides youtube github.com/awesome-selfhosted/awesome-selfhosted \"Adventure is out there\". You can do whatever you want to do. How do you balance family time and side projects? - My future thought that the speaker didn't include in the presentation.","title":"Learning and Building a Homelab"},{"location":"talks/learning-and-homelab/#learning-and-building-a-homelab","text":"Build side projects to keep learning. \"When I hear I forget. When I see I remember. When I do I learn.\" Things that started as side projects: gmail facebook github craigslist twitter khan academy Side projects: give you a space to learn and a place to fail teach you how to perservere Gives you big picture thinking When thinking about a side project: Start small Keep an \"idea book\" Perfect is the enemy of done Open Source: An opportunity to learn Build confidence Take criticism of your code How to find a project to contribute to? github.com/trending github.com/explore podcasts conference talks on YouTube Local conferences and meetups You can even start by just writing documentation for an existing project that isn't well documented. It's a good way to get to understand a certain project. Teach. Volunteer. Mentor. These help you to build empathy. Toastmasters programs. Create: digital art, cook, plant a garden, woodworking, music. What is a homelab? Any sort of project that you built by youself. A home network of computers. A small raspberrypi microcontroller set up. Everything is moving to an \"as-a-service\" set up. Music. Food. Movies. Cloud. etc. Operating a homelab can provide meaningful services that you can use. By building a homelab, you have so much opportunity to learn about things that you didn't know you didn't know. Other resources: r/homelab r/selfhosted r/homeserver digital ocean guides youtube github.com/awesome-selfhosted/awesome-selfhosted \"Adventure is out there\". You can do whatever you want to do. How do you balance family time and side projects? - My future thought that the speaker didn't include in the presentation.","title":"Learning and Building a Homelab"},{"location":"talks/life-after-java8/","text":"Features of Java after Java 8 A look at features of Java after Java 8. Java 9 Java Platform Module System (JMPS) Make the Java SE Platform, and the JDK, more easily scalable down to small computing devices; Improve the security and maintainability of Java SE Platform Implementations in general, and the JDK in particular; Enable improved application performance; and Make it easier for developers to construct and maintain libraries and large applications, for both the Java SE and EE Platforms. To achieve these goals we propose to design and implement a standard module system for the Java SE Platform and to apply that system to the Platform itself, and to the JDK. The module system should be powerful enough to modularize the JDK and other large legacy code bases, yet still be approachable by all developers. JLink JLink is a tool that generates a custom Java runtime image that contains only the platform modules that are required for a given application. Such a runtime image acts exactly like the JRE but contains only the modules we picked and the dependencies they need to function. Read more: https://www.baeldung.com/jlink Collection Factory Methods List.of() Map.of() Collection.of() An example: final List list = List.of(1, 2, 3, 4, 5); Java 10 Local variable type inference - VAR Not dynamic like JavaScript. Java 11 A native HTTP Client Java Flight Recorder Java 13 Switch Expressions The switch case is being evaluated and returned at the same time. Java 14 Java Flight Recorder (JFR) Event Streaming JPackage - A possible replacement for Maven Helpful NullPointerException messages","title":"Life After Java 8"},{"location":"talks/life-after-java8/#features-of-java-after-java-8","text":"A look at features of Java after Java 8.","title":"Features of Java after Java 8"},{"location":"talks/life-after-java8/#java-9","text":"Java Platform Module System (JMPS) Make the Java SE Platform, and the JDK, more easily scalable down to small computing devices; Improve the security and maintainability of Java SE Platform Implementations in general, and the JDK in particular; Enable improved application performance; and Make it easier for developers to construct and maintain libraries and large applications, for both the Java SE and EE Platforms. To achieve these goals we propose to design and implement a standard module system for the Java SE Platform and to apply that system to the Platform itself, and to the JDK. The module system should be powerful enough to modularize the JDK and other large legacy code bases, yet still be approachable by all developers. JLink JLink is a tool that generates a custom Java runtime image that contains only the platform modules that are required for a given application. Such a runtime image acts exactly like the JRE but contains only the modules we picked and the dependencies they need to function. Read more: https://www.baeldung.com/jlink Collection Factory Methods List.of() Map.of() Collection.of() An example: final List list = List.of(1, 2, 3, 4, 5);","title":"Java 9"},{"location":"talks/life-after-java8/#java-10","text":"Local variable type inference - VAR Not dynamic like JavaScript.","title":"Java 10"},{"location":"talks/life-after-java8/#java-11","text":"A native HTTP Client Java Flight Recorder","title":"Java 11"},{"location":"talks/life-after-java8/#java-13","text":"Switch Expressions The switch case is being evaluated and returned at the same time.","title":"Java 13"},{"location":"talks/life-after-java8/#java-14","text":"Java Flight Recorder (JFR) Event Streaming JPackage - A possible replacement for Maven Helpful NullPointerException messages","title":"Java 14"},{"location":"talks/microfrontends/","text":"Think Big, Develop Small: Microfrontends Microservices - An architectural strategy. Distributed. Loosely coupled. Who uses them? Spotify, Netflix, Ikea, Hellofresh, etc. \"Software architecture is those decisions whichh are both important and hard to change.\" - Martin Fowler. Monolithic vs Microservices. Components of the system are broken out and compartmentalized. Benefits: Fault isolation. Eliminate vendor or tech lock in. Smaller and faster deployments. - You don't have to deploy everything all at once. Upgrade small portions of it at a time. Scalability Independent Release Cadence Choice of programming language Challenges: Comminication complexity and security Big money. Investment into hardware and hardware design. Debugging can be difficult. Which component do we debug? Possible performance issues API versioning So what if the UI had the exact same concept as the backend microservices? What exactly is a microfront end? Microservices within the client. Modular components (Apps are a composition of components). Challenges: All components in one app server Have to align releases slow feature roll out in differetn components API calls go thorugh one server App service must argragate all services. Further reading: https://martinfowler.com/articles/micro-frontends.html","title":"Microfrontends"},{"location":"talks/microfrontends/#think-big-develop-small-microfrontends","text":"Microservices - An architectural strategy. Distributed. Loosely coupled. Who uses them? Spotify, Netflix, Ikea, Hellofresh, etc. \"Software architecture is those decisions whichh are both important and hard to change.\" - Martin Fowler. Monolithic vs Microservices. Components of the system are broken out and compartmentalized. Benefits: Fault isolation. Eliminate vendor or tech lock in. Smaller and faster deployments. - You don't have to deploy everything all at once. Upgrade small portions of it at a time. Scalability Independent Release Cadence Choice of programming language Challenges: Comminication complexity and security Big money. Investment into hardware and hardware design. Debugging can be difficult. Which component do we debug? Possible performance issues API versioning So what if the UI had the exact same concept as the backend microservices? What exactly is a microfront end? Microservices within the client. Modular components (Apps are a composition of components). Challenges: All components in one app server Have to align releases slow feature roll out in differetn components API calls go thorugh one server App service must argragate all services. Further reading: https://martinfowler.com/articles/micro-frontends.html","title":"Think Big, Develop Small: Microfrontends"},{"location":"talks/roi-of-usability/","text":"The ROI of Usability Kodak: One of the earliest adopters of User Experience Forward thinking: first figital camera First to the market with ophoto. The market changes from film development to digital photo sharing and they weren't able to keep up. Blockbuster: Video rental store Due to bad customer experience, increase of late fees, Netflix was set up. Netflix elimnated the late fees. Blockbuster could have bought Netflix but they didn't see the value. MySpace: Social Networking site Came out 1 full year before Facebook. No control over the interface lead to a jarring experience for the end users Facebook had a much cleaner interface. MySpace ran out of steam, while Facebook went on. Common themes: The user is at the forefront of the decisions made in the successful companies. When users are unhappy, a stronger brand or a better price, a better future set or a better user experience will win out! 4 metrics: Brand perception Price Feature Set User Experience Rosetta Stone: High cost Low brand perception Bad user experience Not a good future set Rosetta Stone took their outdated apps and turned them into lifestyle apps. Reactive UI's. Easier to use. They returned to profitability. Corporate Usability Models 20 year process to go from unaware of usability to a user-driven/ user-centered corporation.","title":"The ROI of Usability"},{"location":"talks/roi-of-usability/#the-roi-of-usability","text":"Kodak: One of the earliest adopters of User Experience Forward thinking: first figital camera First to the market with ophoto. The market changes from film development to digital photo sharing and they weren't able to keep up. Blockbuster: Video rental store Due to bad customer experience, increase of late fees, Netflix was set up. Netflix elimnated the late fees. Blockbuster could have bought Netflix but they didn't see the value. MySpace: Social Networking site Came out 1 full year before Facebook. No control over the interface lead to a jarring experience for the end users Facebook had a much cleaner interface. MySpace ran out of steam, while Facebook went on. Common themes: The user is at the forefront of the decisions made in the successful companies. When users are unhappy, a stronger brand or a better price, a better future set or a better user experience will win out! 4 metrics: Brand perception Price Feature Set User Experience Rosetta Stone: High cost Low brand perception Bad user experience Not a good future set Rosetta Stone took their outdated apps and turned them into lifestyle apps. Reactive UI's. Easier to use. They returned to profitability. Corporate Usability Models 20 year process to go from unaware of usability to a user-driven/ user-centered corporation.","title":"The ROI of Usability"},{"location":"talks/technical-anxiety/","text":"Technical Anxiety \"Math is confusing\" Look at the math problems that get passed around social media. Everyone gets different answers. \"Math is scary\" Being scared of math tests at school. The Count from Sesame Street is the scariest character on there for a reason. \"Math Anxiety Exists?\" People don't realize that it's a real thing, but it does. It shares some characteristics with Technical Anxiety too. What is Math Anxiety? \"The feeling of tension that interferes with the manipulation of numbers and solving of mathematical problems.\" Lowers working memory processes Shorter attention span Harder to work out tips at restaurants Lowers self confidence Learning disabilities like dyslexia. Synesthesia (seeing words and numbers as colors). Fear of not being good enough Clinical depression Technical Anxiety \"When newly-adapted of introduced technology causes frustration and tension because of difficulty or incompetance.\" Two types of Tech Anxiety: Technology-induced anxiety Going on social media and seeing other peoples lives are \"better.\" Technical anxiety Fear of working with technology. General feelings of tension Getting overwhelmed with large projects and new tech. Feelings of inadequecy. Impostor Syndrome A belief that people know way more than you when in reality they just know different things. How can we create stronger teams and communicate more effectively in IT? Find common ground Conduct 1:1's Don't assume the person you are talking to knows Computer Science terms. Break it down. Ask them if they are familiar and teach if they aren't. Embrace Spike Tasks and KTs Sometimes managers are scary. Sometimes it's easier to talk to a team member. Maybe avoid the word sprint? Think of an actual sprint: Sprints have winners and losers Sprinters are running as fast as they can Sprinters are exhausted by the end of it Accept that Math Anxiety exists!","title":"Technical Anxiety"},{"location":"talks/technical-anxiety/#technical-anxiety","text":"","title":"Technical Anxiety"},{"location":"talks/technical-anxiety/#math-is-confusing","text":"Look at the math problems that get passed around social media. Everyone gets different answers.","title":"\"Math is confusing\""},{"location":"talks/technical-anxiety/#math-is-scary","text":"Being scared of math tests at school. The Count from Sesame Street is the scariest character on there for a reason. \"Math Anxiety Exists?\" People don't realize that it's a real thing, but it does. It shares some characteristics with Technical Anxiety too. What is Math Anxiety? \"The feeling of tension that interferes with the manipulation of numbers and solving of mathematical problems.\" Lowers working memory processes Shorter attention span Harder to work out tips at restaurants Lowers self confidence Learning disabilities like dyslexia. Synesthesia (seeing words and numbers as colors). Fear of not being good enough Clinical depression","title":"\"Math is scary\""},{"location":"talks/technical-anxiety/#technical-anxiety_1","text":"\"When newly-adapted of introduced technology causes frustration and tension because of difficulty or incompetance.\" Two types of Tech Anxiety: Technology-induced anxiety Going on social media and seeing other peoples lives are \"better.\" Technical anxiety Fear of working with technology. General feelings of tension Getting overwhelmed with large projects and new tech. Feelings of inadequecy. Impostor Syndrome A belief that people know way more than you when in reality they just know different things. How can we create stronger teams and communicate more effectively in IT? Find common ground Conduct 1:1's Don't assume the person you are talking to knows Computer Science terms. Break it down. Ask them if they are familiar and teach if they aren't. Embrace Spike Tasks and KTs Sometimes managers are scary. Sometimes it's easier to talk to a team member. Maybe avoid the word sprint? Think of an actual sprint: Sprints have winners and losers Sprinters are running as fast as they can Sprinters are exhausted by the end of it Accept that Math Anxiety exists!","title":"Technical Anxiety"},{"location":"talks/ui-and-a11y/","text":"UI and A11Y A11Y - Accessibility Axe is an accessibility testing toolkit available as a chrome plugin. Can be used with manual testing and automated testing with eggplant. Building accessibility into our apps is the right thing to do. Disabilities can be permanent, temporary, or situational. POUR: Perceivable Operable Understandable Robust Make use of the enter key instead of only clicking a mouse to click an OK button. Provide alt text for images so that a screen reader and make use of it.","title":"UI and A11y.md"},{"location":"talks/ui-and-a11y/#ui-and-a11y","text":"A11Y - Accessibility Axe is an accessibility testing toolkit available as a chrome plugin. Can be used with manual testing and automated testing with eggplant. Building accessibility into our apps is the right thing to do. Disabilities can be permanent, temporary, or situational. POUR: Perceivable Operable Understandable Robust Make use of the enter key instead of only clicking a mouse to click an OK button. Provide alt text for images so that a screen reader and make use of it.","title":"UI and A11Y"}]}